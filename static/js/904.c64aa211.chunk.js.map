{"version":3,"file":"static/js/904.c64aa211.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contscts/selector.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { Field, Form } from \"formik\";\nimport styled from \"styled-components\";\n\nexport const PhoneBook = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const FormStyled = styled(Form)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const Title = styled.h1`\n    font-size: 30px;\n    margin-bottom: 20px;\n`;\n\nexport const FormLabel = styled.label`\n    display: block;\n    margin-top: 10px;\n    font-size: 20px;\n    font-weight: 700;\n    text-align: center;\n    margin-bottom: 10px;\n`;\n\nexport const FormSpan = styled.span`\n    display: block;\n    margin-top: 10px;\n    font-size: 20px;\n    font-weight: 700;\n    margin-left: 10px;\n   text-align: center;\n    margin-bottom: 10px;\n`;\n\nexport const FormInput = styled(Field)`\n    display: block;\n    width: 300px;\n    padding: 10px;\n    margin-top: 10px;\n    font-size: 20px;\n    font-weight: 700;\n    border: 2px solid #2196f3;\n    border-radius: 4px;\n    align-items: center;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:focus {\n        border-color: #ff6b08;\n        box-shadow: 0px 0px 8px 0px rgba(255, 107, 8, 0.5);\n        outline: none;\n    }\n`;\n\nexport const FormButton = styled.button`\n    display: block;\n    width: 300px;\n    padding: 10px;\n    margin-top: 10px;\n    font-size: 20px;\n    font-weight: 700;\n    color: #fff;\n    background-color: #2196f3;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover {\n        background-color: #ff6b08;\n    }\n`;","export const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n","import { ErrorMessage, Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport {\n  FormButton,\n  FormInput,\n  FormLabel,\n  FormSpan,\n  FormStyled,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contscts/thunk';\nimport { Report } from 'notiflix';\nimport { selectContacts } from 'redux/contscts/selector';\nimport { useEffect } from 'react';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const nameCheck = name => {\n    return contacts.filter(contact => contact.name.includes(name));\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n    const check = nameCheck(values.name);\n\n    if (check.length <= 0) {\n      dispatch(addContact(values));\n      return;\n    }\n\n    Report.info('Warning!', `\"${values.name}\" is already in contacts`, 'Okay');\n  };\n\n  useEffect(() => {\n    if (contacts.length === 0) {\n      return;\n    }\n  }, [contacts]);\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n      <FormStyled>\n        <FormLabel>\n          <FormSpan>Name</FormSpan>\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <FormSpan>Number</FormSpan>\n          <FormInput\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage name=\"number\" />\n        </FormLabel>\n        <FormButton type=\"submit\">add contact</FormButton>\n      </FormStyled>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  checkName: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  contacts: PropTypes.array,\n  dispatch: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  resetForm: PropTypes.func,\n};\n","import styled from \"styled-components\";\n\nexport const FilterContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const FilterSpanStyled = styled.span`\nfont-size: 20px;\n    margin-bottom: 20px;\n`;\n\nexport const FilterLabelStyled = styled.label`\n    display: block;\n    margin-top: 10px;\n    font-size: 20px;\n    font-weight: 700;\n    text-align: center;\n    margin-bottom: 10px;\n`;\n\nexport const FilterInputStyled = styled.input`\n    display: block;\n    width: 300px;\n    padding: 10px;\n    margin-top: 10px;\n    font-size: 20px;\n    font-weight: 700;\n    border: 2px solid #2196f3;\n    border-radius: 4px;\n    align-items: center;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:focus {\n        border-color: #ff6b08;\n        box-shadow: 0px 0px 8px 0px rgba(255, 107, 8, 0.5);\n        outline: none;\n    }\n`;","import PropTypes from 'prop-types';\nimport { changeFilter } from 'redux/contscts/filteredSlice';\nimport {\n  FilterContainer,\n  FilterInputStyled,\n  FilterLabelStyled,\n  FilterSpanStyled,\n} from './Filter.styled';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleInput = e => {\n    const filterNormalize = e.target.value.toLowerCase();\n    dispatch(changeFilter(filterNormalize));\n  };\n\n  return (\n    <>\n      <FilterContainer>\n        <FilterSpanStyled>Find contacts by name</FilterSpanStyled>\n        <FilterLabelStyled htmlFor=\"filter\">\n          <FilterInputStyled type=\"text\" onInput={handleInput} />\n        </FilterLabelStyled>\n      </FilterContainer>\n    </>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  handleInput: PropTypes.func,\n};\n","import styled from \"styled-components\";\n\nexport const ContactItems = styled.ul`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 20px;\n`;\n\nexport const ContactItem = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 20px;\n    font-size: 20px;\n    font-weight: 700;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    color: #000;\n    text-decoration: none;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const ContactItemButton = styled.button`\n margin-left: 20px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 20px;\n    font-size: 20px;\n    font-weight: 700;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    color: #000;\n    text-decoration: none;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover {\n        color: #fff;\n        background-color: #000;\n        border-radius: 4px;\n    }\n`;","import PropTypes from 'prop-types';\nimport {\n  ContactItem,\n  ContactItemButton,\n  ContactItems,\n} from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/contscts/thunk';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/contscts/selector';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contactsListClear = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      {!selectIsLoading && contacts.length <= 0 && (\n        <p>There are no contacts in the list</p>\n      )}\n\n      <ContactItems>\n        {contactsListClear.map(({ id, name, number }) => (\n          <ContactItem key={id}>\n            {name}: {number}\n            <ContactItemButton\n              onClick={() => dispatch(deleteContact(id))}\n              type=\"button\"\n            >\n              Delete\n            </ContactItemButton>\n          </ContactItem>\n        ))}\n      </ContactItems>\n    </>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { PhoneBook, Title } from 'components/ContactForm/ContactForm.styled';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { selectIsLoading } from 'redux/contscts/selector';\nimport { useSelector } from 'react-redux';\nimport { PulseLoader } from 'react-spinners';\n\nexport default function ContactsPage() {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <PhoneBook>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && (\n        <span>\n          <PulseLoader color=\"black\" size={10} />\n        </span>\n      )}\n      <ContactList />\n    </PhoneBook>\n  );\n}\n"],"names":["PhoneBook","styled","_templateObject","_taggedTemplateLiteral","FormStyled","Form","_templateObject2","Title","_templateObject3","FormLabel","_templateObject4","FormSpan","_templateObject5","FormInput","Field","_templateObject6","FormButton","_templateObject7","selectContacts","state","contacts","selectIsLoading","isLoading","selectFilter","filter","initialValues","name","number","useSelector","dispatch","useDispatch","useEffect","length","_jsx","Formik","onSubmit","values","_ref","resetForm","contact","includes","addContact","Report","concat","children","_jsxs","type","pattern","title","required","ErrorMessage","FilterContainer","FilterSpanStyled","FilterLabelStyled","FilterInputStyled","_Fragment","htmlFor","onInput","e","filterNormalize","target","value","toLowerCase","changeFilter","ContactItems","ContactItem","ContactItemButton","fetchContacts","contactsListClear","map","id","onClick","deleteContact","ContactsPage","ContactForm","Filter","PulseLoader","color","size","ContactList"],"sourceRoot":""}