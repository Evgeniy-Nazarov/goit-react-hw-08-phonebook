{"version":3,"file":"static/js/904.b48b2109.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contscts/selector.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const PhoneBook = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 400px;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #000;\n    border-radius: 5px;\n`;\n\nexport const Title = styled.h1`\n    font-size: 30px;\n    margin-bottom: 20px;\n`;\nexport const FormLabel = styled.label`\nmargin-bottom: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n\n    & > input {\n        padding: 10px;\n        border-radius: 5px;\n        background-color: white;\n        color: black;\n        font-size: 20px;\n        cursor: pointer;\n        transition: all 250ms linear;\n        &:hover {\n            box-shadow: 0 0 10px 0 #000;\n        }\n    &:focus {\n            box-shadow: 0 0 10px 0 #000;\n    }\n    }\n`;\n\nexport const FormSpan = styled.span`\n    font-size: 20px;\n    font-weight: 700;\n    margin-bottom: 10px;\n    margin-top: 10px;\n`;\n\nexport const FormButton = styled.button`\n    margin-top: 10px;\n    position: relative;\nleft: 50%;\ntransform: translate(-50%, 0);\n    padding: 10px;\n    border-radius: 5px;\n    border: none;\n    background-color: #000;\n    color: #fff;\n    font-size: 20px;\n    cursor: pointer;\n    transition: all 250ms linear;\n    &:hover {\n        background-color: grey;\n        box-shadow: 0 0 10px 0 #000;\n    }\n`;","export const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n","import { Form, Formik, Field, ErrorMessage } from 'formik';\nimport PropTypes from 'prop-types';\nimport { FormButton, FormLabel, FormSpan } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contscts/thunk';\nimport { Report } from 'notiflix';\nimport { selectContacts } from 'redux/contscts/selector';\nimport { useEffect } from 'react';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const nameCheck = name => {\n    return contacts.filter(contact => contact.name.includes(name));\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n    const check = nameCheck(values.name);\n\n    if (check.length <= 0) {\n      dispatch(addContact(values));\n      return;\n    }\n\n    Report.info('Warning!', `\"${values.name}\" is already in contacts`, 'Okay');\n  };\n\n  useEffect(() => {\n    if (contacts.length === 0) {\n      return;\n    }\n  }, [contacts]);\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n      <Form>\n        <FormLabel>\n          <FormSpan>Name</FormSpan>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <FormSpan>Number</FormSpan>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage name=\"number\" />\n        </FormLabel>\n        <FormButton type=\"submit\">add contact</FormButton>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  checkName: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  contacts: PropTypes.array,\n  dispatch: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  resetForm: PropTypes.func,\n};\n","import styled from \"styled-components\";\n\nexport const FilterContainer = styled.label`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 10px;\n\n    & > span {\n        font-size: 20px;\n        font-weight: 700;\n        margin-bottom: 20px;\n        margin-top: 10px;\n    }    \n\n    & > input {\n        padding: 10px;\n        border-radius: 5px;\n        background-color: white;\n        color: black;\n        font-size: 20px;\n        cursor: pointer;\n        transition: all 250ms linear;\n        &:hover {\n            box-shadow: 0 0 10px 0 #000;\n        }\n    &:focus {\n            box-shadow: 0 0 10px 0 #000;\n    }\n    }\n}\n`;\n","import PropTypes from 'prop-types';\nimport { changeFilter } from 'redux/contscts/filteredSlice';\nimport { FilterContainer } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleInput = e => {\n    const filterNormalize = e.target.value.toLowerCase();\n    dispatch(changeFilter(filterNormalize));\n  };\n\n  return (\n    <>\n      <FilterContainer>\n        <span>Find contacts by name</span>\n        <input type=\"text\" onInput={handleInput} />\n      </FilterContainer>\n    </>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  handleInput: PropTypes.func,\n};\n","import styled from \"styled-components\";\n\nexport const ContactItems = styled.ul`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 0 auto;\n    padding: 20px;\n    border-radius: 5px;\n    list-style: none;\n`;\n\nexport const ContactItem = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 10px;\n    padding: 10px;\n    border: 1px solid #000;\n    border-radius: 5px;\n    &:last-child {\n        margin-bottom: 0;\n    }\n    &:hover {\n        box-shadow: 0 0 10px 0 #000;\n    }\n    & > button {\n        padding: 5px;\n        border-radius: 5px;\n        border: none;\n    background-color: #000;\n    color: #fff;\n    font-size: 14px;\n    cursor: pointer;\n    transition: all 250ms linear;\n    &:hover {\n        background-color: grey;\n        box-shadow: 0 0 10px 0 #000;\n    }\n`;","import PropTypes from 'prop-types';\nimport { ContactItem, ContactItems } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/contscts/thunk';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/contscts/selector';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contactsListClear = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      {!selectIsLoading && contacts.length <= 0 && (\n        <p>There are no contacts in the list</p>\n      )}\n\n      <ContactItems>\n        {contactsListClear.map(({ id, name, number }) => (\n          <ContactItem key={id}>\n            {name}: {number}\n            <button onClick={() => dispatch(deleteContact(id))} type=\"button\">\n              Delete\n            </button>\n          </ContactItem>\n        ))}\n      </ContactItems>\n    </>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { PhoneBook, Title } from 'components/ContactForm/ContactForm.styled';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { selectIsLoading } from 'redux/contscts/selector';\nimport { useSelector } from 'react-redux';\nimport { PulseLoader } from 'react-spinners';\n\nexport default function ContactsPage() {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <PhoneBook>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && (\n        <span>\n          <PulseLoader color=\"black\" size={10} />\n        </span>\n      )}\n      <ContactList />\n    </PhoneBook>\n  );\n}\n"],"names":["PhoneBook","styled","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","FormLabel","_templateObject3","FormSpan","_templateObject4","FormButton","_templateObject5","selectContacts","state","contacts","selectIsLoading","isLoading","selectFilter","filter","initialValues","name","number","useSelector","dispatch","useDispatch","useEffect","length","_jsx","Formik","onSubmit","values","_ref","resetForm","contact","includes","addContact","Report","concat","children","_jsxs","Form","Field","type","pattern","title","required","ErrorMessage","FilterContainer","_Fragment","onInput","e","filterNormalize","target","value","toLowerCase","changeFilter","ContactItems","ContactItem","fetchContacts","contactsListClear","map","id","onClick","deleteContact","ContactsPage","ContactForm","Filter","PulseLoader","color","size","ContactList"],"sourceRoot":""}